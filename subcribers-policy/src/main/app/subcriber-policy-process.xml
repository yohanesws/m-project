<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <vm:connector name="subcribers-backend" validateConnections="true" doc:name="VM"/>
    <flow name="subcribers-policyFlow">
    		<jms:inbound-endpoint exchange-pattern="request-response" queue="${queue.subcriber.policy}" connector-ref="Active_MQ" doc:name="JMS"/>
        <json:json-to-object-transformer doc:name="Transfrom to Map" returnClass="java.util.Map"/>
        <set-session-variable doc:name="Set MSISDN Var"  value="#[payload.request.msisdn]" variableName="msisdn" />
        <logger message="Subcriber Request : #[payload]" level="INFO" doc:name="Logger"/>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way" path="backend-request" connector-ref="subcribers-backend" doc:name="Backend-Request">
        			<splitter expression="#[payload.request.inquiries]" doc:name="Splitter"/>
            </vm:outbound-endpoint>
            <vm:inbound-endpoint exchange-pattern="one-way" path="backend-replay" connector-ref="subcribers-backend" doc:name="Backend-Replay">
            		<collection-aggregator failOnTimeout="true"  doc:name="Collection Aggregator" />
            </vm:inbound-endpoint>
        </request-reply>
        <component class="com.yohanesws.processor.PayloadCombineProcessor" doc:name="Combine Payload"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="Finish Process #[payload]" level="INFO" doc:name="Logger"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="payload #[payload] error at #[exception]" level="ERROR" doc:name="Logger"/>
            <set-payload value="#[payload.text]" doc:name="Set Payload"/>
            <logger message="setting new payload #[payload]" />
        </catch-exception-strategy>
    </flow>
    <flow name="Backend">
        <vm:inbound-endpoint exchange-pattern="one-way" connector-ref="subcribers-backend" doc:name="Backend-Request" path="backend-request"/>
        <async doc:name="Async">
            <set-variable variableName="queue" value="#[payload]" doc:name="Set Queue" />
            <set-payload value="#[sessionVars.msisdn]" doc:name="Set Payload"/>
            <logger message="getting inquiry for #[payload] about #[flowVars.queue]" level="INFO" doc:name="Logger"/>
            <jms:outbound-endpoint exchange-pattern="request-response" queue="#['${queue.subcriber.prefix}'+flowVars.queue]" connector-ref="Active_MQ"  doc:name="JMS-Backend"/>
            <logger message="get from backend #[payload]" level="INFO" doc:name="Logger"/>
            <vm:outbound-endpoint exchange-pattern="one-way" path="backend-replay" connector-ref="subcribers-backend" doc:name="Backend-Replay"/>
        </async>
       <!-- <choice-exception-strategy doc:name="Choice Exception Strategy">
           <rollback-exception-strategy doc:name="Rollback Exception Strategy" when="#[exception.causedBy(java.lang.Exception)]">
            	<logger message="error happen" level="ERROR" doc:name="Logger"/>
                <set-payload value="#[['msisdn':sessionVars.msisdn,'backend':flowVars.queue,'status':'backend not ready']]" doc:name="Set Payload"/>
                           </rollback-exception-strategy> 
            <catch-exception-strategy doc:name="Catch Exception Strategy"> 
            		<logger message="error happen" level="ERROR" doc:name="Logger"/>
                <set-payload value="#[['msisdn':sessionVars.msisdn,'backend':flowVars.queue,'status':'backend not ready']]" doc:name="Set Payload"/>
            </catch-exception-strategy>
        </choice-exception-strategy>  -->
    </flow>
</mule>
